// Copyright (C) 2018 Storj Labs, Inc.
// See LICENSE for copying information.

syntax = "proto3";
option go_package = "pb";

package piecestoreroutes;

import "node.proto";
import "gogo.proto";
import "google/protobuf/duration.proto";

service PieceStoreRoutes {
  rpc Piece(PieceId) returns (PieceSummary) {}

  rpc Retrieve(stream PieceRetrieval) returns (stream PieceRetrievalStream) {}

  rpc Store(stream PieceStore) returns (PieceStoreSummary) {}

  rpc Delete(PieceDelete) returns (PieceDeleteSummary) {}

  rpc Stats(StatsReq) returns (StatSummary) {}

  rpc Dashboard(DashboardReq) returns (stream DashboardStats) {}
}

message PayerBandwidthAllocation { // Payer refers to satellite

  enum Action {
    PUT = 0;
    GET = 1;
    GET_AUDIT = 2;
    GET_REPAIR = 3;
    PUT_REPAIR = 4;
  }

  message Data {
    bytes satellite_id = 1 [(gogoproto.customtype) = "NodeID", (gogoproto.nullable) = false];        // Satellite Identity
    bytes uplink_id = 2 [(gogoproto.customtype) = "NodeID", (gogoproto.nullable) = false]; // Uplink Identity
    int64 max_size = 3;            // Max amount of data the satellite will pay for in bytes
    int64 expiration_unix_sec = 4; // Unix timestamp for when data is no longer being paid for
    string serial_number = 5;      // Unique serial number
    Action action = 6;             // GET or PUT
    int64 created_unix_sec = 7;    // Unix timestamp for when PayerbandwidthAllocation was created
    bytes pub_key = 8;             // Renter Public Key 
  }

  bytes signature = 1; // Seralized Data signed by Satellite
  bytes data = 2;      // Serialization of above Data Struct
}

message RenterBandwidthAllocation { // Renter refers to uplink
  message Data {
    PayerBandwidthAllocation payer_allocation = 1; // Bandwidth Allocation from Satellite
    int64 total = 2;                               // Total Bytes Stored
    bytes storage_node_id = 3 [(gogoproto.customtype) = "NodeID", (gogoproto.nullable) = false]; // Storage Node Identity
  }

  bytes signature = 1; // Seralized Data signed by Uplink
  bytes data = 2;      // Serialization of above Data Struct
}

message PieceStore {
  message PieceData {
    // TODO: may want to use customtype and fixed-length byte slice
    string id = 1;
    int64 expiration_unix_sec = 2;
    bytes content = 3;
  }

  RenterBandwidthAllocation bandwidth_allocation = 1;
  PieceData piece_data = 2;
  SignedMessage authorization = 3;
}

message PieceId {
  // TODO: may want to use customtype and fixed-length byte slice
  string id = 1;

  SignedMessage authorization = 2;
}

message PieceSummary {
  string id = 1;
  int64 piece_size = 2;
  int64 expiration_unix_sec = 3;
}

message PieceRetrieval {
  message PieceData {
    // TODO: may want to use customtype and fixed-length byte slice
    string id = 1;
    int64 piece_size = 2;
    int64 offset = 3;
  }

  RenterBandwidthAllocation bandwidth_allocation = 1;
  PieceData piece_data = 2;
  SignedMessage authorization = 3;
}

message PieceRetrievalStream {
  int64 piece_size = 1;
  bytes content = 2;
}

message PieceDelete {
  // TODO: may want to use customtype and fixed-length byte slice
  string id = 1;
  SignedMessage authorization = 3;
}

message PieceDeleteSummary {
  string message = 1;
}

message PieceStoreSummary {
  string message = 1;
  int64 total_received = 2;
}

message StatsReq {}

message StatSummary {
  int64 used_space = 1;
  int64 available_space = 2;
  int64 used_bandwidth = 3;
  int64 available_bandwidth = 4;
}

message SignedMessage {
  bytes data = 1;
  bytes signature = 2;
  bytes public_key = 3;
}

message DashboardReq { }

message DashboardStats {
  string node_id = 1;
  int64 node_connections = 2;
  string address = 3;
  StatSummary stats = 4;
  bool connection = 5;
  google.protobuf.Duration uptime = 6;
}
