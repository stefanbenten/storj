// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/overlay/client.go

// Package mock_overlay is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	x "storj.io/storj/pkg/overlay"
	pb "storj.io/storj/pkg/pb"
	storj "storj.io/storj/pkg/storj"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Choose mocks base method
func (m *MockClient) Choose(ctx context.Context, op x.Options) ([]*pb.Node, error) {
	ret := m.ctrl.Call(m, "Choose", ctx, op)
	ret0, _ := ret[0].([]*pb.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Choose indicates an expected call of Choose
func (mr *MockClientMockRecorder) Choose(ctx, op interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Choose", reflect.TypeOf((*MockClient)(nil).Choose), ctx, op)
}

// Lookup mocks base method
func (m *MockClient) Lookup(ctx context.Context, nodeID storj.NodeID) (*pb.Node, error) {
	ret := m.ctrl.Call(m, "Lookup", ctx, nodeID)
	ret0, _ := ret[0].(*pb.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Lookup indicates an expected call of Lookup
func (mr *MockClientMockRecorder) Lookup(ctx, nodeID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lookup", reflect.TypeOf((*MockClient)(nil).Lookup), ctx, nodeID)
}

// BulkLookup mocks base method
func (m *MockClient) BulkLookup(ctx context.Context, nodeIDs storj.NodeIDList) ([]*pb.Node, error) {
	ret := m.ctrl.Call(m, "BulkLookup", ctx, nodeIDs)
	ret0, _ := ret[0].([]*pb.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BulkLookup indicates an expected call of BulkLookup
func (mr *MockClientMockRecorder) BulkLookup(ctx, nodeIDs interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkLookup", reflect.TypeOf((*MockClient)(nil).BulkLookup), ctx, nodeIDs)
}
